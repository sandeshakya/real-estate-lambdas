AWSTemplateFormatVersion: 2010-09-09
Description: |
  Master Cloudformation template for project
Parameters:
  NestedStackS3BucketName:
    Description: Nested Stack Template URL
    Type: String
    AllowedPattern: ^https:\/\/.*\.s3\.amazonaws\.com\/.*\.yaml$
    ConstraintDescription: Invalid Template URL
  DynamodbTableName:
    Description: Dynamodb Table Name
    Type: String
Resources:
  TestDynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: createdat
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: type-createdat-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: createdat
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref DynamodbTableName
  NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Notifcation Lambda
      FunctionName: dev-notifications
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt NotificationsLambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 180
      Environment:
        Variables:
          TABLE_NAME: !Ref TestDynamodbTable # A map of key-value pairs that the Lambda function can access
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def handler(event,handler):
            print(event)
            print(os.environ['TABLE_NAME'])
            return dict(status=200) 
  NotificationsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              Resource: !GetAtt TestDynamodbTable.Arn
  Point2HomesStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LambdaName: dev-point2homes-webscraper
        DynamodbTableArn: !GetAtt TestDynamodbTable.Arn
        DynamodbTable: !Ref TestDynamodbTable
      TemplateURL: !Ref NestedStackS3BucketName
      TimeoutInMinutes: 60
  SaskHousesStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LambdaName: dev-saskhouses-webscraper
        DynamodbTableArn: !GetAtt TestDynamodbTable.Arn
        DynamodbTable: !Ref TestDynamodbTable
      TemplateURL: !Ref NestedStackS3BucketName
      TimeoutInMinutes: 60
  RemaxStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LambdaName: dev-remax-webscraper
        DynamodbTableArn: !GetAtt TestDynamodbTable.Arn
        DynamodbTable: !Ref TestDynamodbTable
      TemplateURL: !Ref NestedStackS3BucketName
      TimeoutInMinutes: 60
  